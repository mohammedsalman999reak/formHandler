{
  "version": 3,
  "sources": ["../bundle-uP6E1U/checked-fetch.js", "../../../src/services/airtable.js", "../../../src/services/email.js", "../../../src/utils/validator.js", "../../../src/utils/security.js", "../../../src/utils/logger.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-uP6E1U/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-uP6E1U/middleware-loader.entry.ts"],
  "sourceRoot": "/home/reak/myfiles/FormHandler2/.wrangler/tmp/dev-Oy37YD",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\r\n * AirtableService\r\n * Handles all interactions with Airtable API for form submissions\r\n */\r\nexport class AirtableService {\r\n  constructor() {\r\n    // Base URL for Airtable API\r\n    this.baseUrl = 'https://api.airtable.com/v0';\r\n  }\r\n\r\n  /**\r\n   * Save form submission to Airtable\r\n   * @param {Object} formData - Form data to save\r\n   * @param {Object} env - Environment variables (API keys, base ID, table name)\r\n   */\r\n  async saveSubmission(formData, env) {\r\n    try {\r\n      // Ensure Airtable configuration exists\r\n      if (!env.AIRTABLE_API_KEY || !env.AIRTABLE_BASE_ID) {\r\n        throw new Error('Airtable configuration missing');\r\n      }\r\n\r\n      // Prepare data in Airtable format\r\n      const airtableData = this.prepareAirtableData(formData);\r\n\r\n      // Send data to Airtable\r\n      const response = await this.makeAirtableRequest(airtableData, env);\r\n\r\n      // If request successful, return success object\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        return {\r\n          success: true,\r\n          recordId: result.id, // Airtable record ID\r\n          message: 'Data saved to Airtable successfully'\r\n        };\r\n      } else {\r\n        // If API returns error, capture it\r\n        const errorData = await response.text();\r\n        throw new Error(`Airtable API error: ${response.status} - ${errorData}`);\r\n      }\r\n    } catch (error) {\r\n      // Return error object instead of throwing\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare data in format Airtable expects\r\n   * Maps incoming form data to table fields\r\n   */\r\n  prepareAirtableData(formData) {\r\n    // Only map fields that exist in your Airtable table\r\n    const fields = {\r\n      Name: formData.Name || formData.name || '',          // Map Name\r\n      Email: formData.Email || formData.email || '',       // Map Email\r\n      Message: formData.Message || formData.message || '', // Map Message\r\n      Timestamp: formData.Timestamp || new Date().toISOString(), // Use ISO string for date\r\n      'IP Address': formData['IP Address'] || formData.ip || 'unknown', // Capture IP\r\n      Origin: formData.Origin || formData.origin || 'unknown'          // Capture Origin header\r\n    };\r\n\r\n    // Airtable API expects records array\r\n    return { records: [{ fields }] };\r\n  }\r\n\r\n  /**\r\n   * Send POST request to Airtable API\r\n   */\r\n  async makeAirtableRequest(data, env) {\r\n    const url = `${this.baseUrl}/${env.AIRTABLE_BASE_ID}/${env.AIRTABLE_TABLE_NAME || 'Form_Submissions'}`;\r\n\r\n    const requestOptions = {\r\n      method: 'POST',  // POST to create new record\r\n      headers: {\r\n        Authorization: `Bearer ${env.AIRTABLE_API_KEY}`, // API key in header\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data) // Convert JS object to JSON string\r\n    };\r\n\r\n    // Retry request in case of failures\r\n    return await this.retryRequest(url, requestOptions, 3);\r\n  }\r\n\r\n  /**\r\n   * Retry logic with exponential backoff\r\n   * Tries the request multiple times if network/server errors occur\r\n   */\r\n  async retryRequest(url, options, maxRetries = 3) {\r\n    let lastError;\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const response = await fetch(url, options);\r\n\r\n        // If success or client error, return immediately\r\n        if (response.ok || (response.status >= 400 && response.status < 500)) return response;\r\n\r\n        // If server error and last attempt, return response\r\n        if (attempt === maxRetries) return response;\r\n\r\n        // Wait before retrying (exponential backoff)\r\n        await this.delay(Math.pow(2, attempt) * 1000);\r\n      } catch (error) {\r\n        lastError = error;\r\n        if (attempt === maxRetries) throw error; // Throw if final attempt\r\n        await this.delay(Math.pow(2, attempt) * 1000); // Wait before next try\r\n      }\r\n    }\r\n    throw lastError;\r\n  }\r\n\r\n  /**\r\n   * Utility function to pause execution\r\n   */\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Test Airtable connection\r\n   * Useful for debugging API key or table issues\r\n   */\r\n  async testConnection(env) {\r\n    try {\r\n      if (!env.AIRTABLE_API_KEY || !env.AIRTABLE_BASE_ID) {\r\n        return { success: false, error: 'Airtable configuration missing' };\r\n      }\r\n\r\n      const url = `${this.baseUrl}/${env.AIRTABLE_BASE_ID}/${env.AIRTABLE_TABLE_NAME || 'Form_Submissions'}`;\r\n      const response = await fetch(url, {\r\n        method: 'GET', // GET to fetch table info\r\n        headers: { Authorization: `Bearer ${env.AIRTABLE_API_KEY}` }\r\n      });\r\n\r\n      return {\r\n        success: response.ok,\r\n        status: response.status,\r\n        error: response.ok ? null : `HTTP ${response.status}`\r\n      };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n", "export class EmailService {\r\n  constructor() {\r\n    this.baseUrl = 'https://api.resend.com';\r\n  }\r\n\r\n  async sendNotification(formData, env) {\r\n    try {\r\n      if (!env.RESEND_API_KEY) throw new Error('Resend API key not configured');\r\n      if (!env.RESEND_FROM_EMAIL || !env.RESEND_TO_EMAIL) throw new Error('Email addresses not configured');\r\n\r\n      const emailContent = this.prepareEmailContent(formData, env);\r\n      const response = await this.makeResendRequest(emailContent, env);\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        return { success: true, messageId: result.id, message: 'Email sent successfully' };\r\n      } else {\r\n        const errorData = await response.json();\r\n        throw new Error(`Resend API error: ${response.status} - ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  prepareEmailContent(formData, env) {\r\n    const subject = 'New Form Submission';\r\n    const htmlContent = this.generateHtmlEmail(formData);\r\n    const textContent = this.generateTextEmail(formData);\r\n\r\n    return {\r\n      from: env.RESEND_FROM_EMAIL,\r\n      to: [env.RESEND_TO_EMAIL],\r\n      subject,\r\n      html: htmlContent,\r\n      text: textContent,\r\n      reply_to: formData.Email || null\r\n    };\r\n  }\r\n\r\n  generateHtmlEmail(formData) {\r\n    const fieldsHtml = Object.entries(formData)\r\n      .filter(([key]) => !['Timestamp', 'IP Address', 'Origin'].includes(key))\r\n      .map(([key, value]) => `\r\n        <div style=\"margin-bottom: 10px;\">\r\n          <strong>${key}:</strong> ${this.escapeHtml(String(value))}\r\n        </div>\r\n      `).join('');\r\n\r\n    return `\r\n      <div style=\"font-family: Arial, sans-serif; line-height: 1.5; color: #333;\">\r\n        <h2>New Form Submission</h2>\r\n        ${fieldsHtml}\r\n        <hr>\r\n        <div>Timestamp: ${formData.Timestamp}</div>\r\n        <div>IP Address: ${formData['IP Address']}</div>\r\n        <div>Origin: ${formData.Origin}</div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  generateTextEmail(formData) {\r\n    const fieldsText = Object.entries(formData)\r\n      .filter(([key]) => !['Timestamp', 'IP Address', 'Origin'].includes(key))\r\n      .map(([key, value]) => `${key}: ${value}`)\r\n      .join('\\n');\r\n\r\n    return `\r\nNew Form Submission\r\n\r\n${fieldsText}\r\n\r\n---\r\nTimestamp: ${formData.Timestamp}\r\nIP Address: ${formData['IP Address']}\r\nOrigin: ${formData.Origin}\r\n    `.trim();\r\n  }\r\n\r\n  async makeResendRequest(emailContent, env) {\r\n    const url = `${this.baseUrl}/emails`;\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${env.RESEND_API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(emailContent)\r\n    };\r\n    return await this.retryRequest(url, requestOptions, 3);\r\n  }\r\n\r\n  async retryRequest(url, options, maxRetries = 3) {\r\n    let lastError;\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const response = await fetch(url, options);\r\n        if (response.ok || (response.status >= 400 && response.status < 500)) return response;\r\n        if (attempt === maxRetries) return response;\r\n        await this.delay(Math.pow(2, attempt) * 1000);\r\n      } catch (error) {\r\n        lastError = error;\r\n        if (attempt === maxRetries) throw error;\r\n        await this.delay(Math.pow(2, attempt) * 1000);\r\n      }\r\n    }\r\n    throw lastError;\r\n  }\r\n\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  escapeHtml(text) {\r\n    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#039;' };\r\n    return text.replace(/[&<>\"']/g, m => map[m]);\r\n  }\r\n\r\n  capitalizeFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n}\r\n", "/**\r\n * Form Validator\r\n * Handles form data validation and sanitization\r\n * \r\n * Features:\r\n * - Required field validation\r\n * - Email format validation\r\n * - XSS protection through sanitization\r\n * - Data type validation\r\n * - Length limits and constraints\r\n */\r\n\r\nexport class FormValidator {\r\n  constructor() {\r\n    // Common validation patterns\r\n    this.patterns = {\r\n      email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n      phone: /^[\\+]?[1-9][\\d]{0,15}$/,\r\n      url: /^https?:\\/\\/.+/,\r\n      alphanumeric: /^[a-zA-Z0-9\\s]+$/,\r\n      name: /^[a-zA-Z\\s'-]+$/\r\n    };\r\n\r\n    // Field length limits\r\n    this.limits = {\r\n      name: { min: 1, max: 100 },\r\n      email: { min: 5, max: 254 },\r\n      phone: { min: 10, max: 20 },\r\n      message: { min: 1, max: 5000 },\r\n      subject: { min: 1, max: 200 },\r\n      company: { min: 1, max: 100 },\r\n      website: { min: 1, max: 200 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate form data against required fields and rules\r\n   * @param {Object} formData - Form data to validate\r\n   * @param {string} requiredFields - Comma-separated list of required fields\r\n   * @returns {Object} Validation result\r\n   */\r\n  validateFormData(formData, requiredFields = '') {\r\n    const errors = [];\r\n    const requiredFieldsList = requiredFields ? requiredFields.split(',').map(f => f.trim()) : [];\r\n\r\n    // Check required fields\r\n    for (const field of requiredFieldsList) {\r\n      if (!formData[field] || formData[field].toString().trim() === '') {\r\n        errors.push(`${field} is required`);\r\n      }\r\n    }\r\n\r\n    // Validate each field\r\n    for (const [field, value] of Object.entries(formData)) {\r\n      const fieldErrors = this.validateField(field, value);\r\n      errors.push(...fieldErrors);\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors: errors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate individual field\r\n   * @param {string} field - Field name\r\n   * @param {any} value - Field value\r\n   * @returns {Array} Validation errors for this field\r\n   */\r\n  validateField(field, value) {\r\n    const errors = [];\r\n    const stringValue = String(value).trim();\r\n\r\n    // Skip validation for empty values (handled by required field check)\r\n    if (!stringValue) {\r\n      return errors;\r\n    }\r\n\r\n    // Check length limits\r\n    const limit = this.limits[field];\r\n    if (limit) {\r\n      if (stringValue.length < limit.min) {\r\n        errors.push(`${field} must be at least ${limit.min} characters long`);\r\n      }\r\n      if (stringValue.length > limit.max) {\r\n        errors.push(`${field} must be no more than ${limit.max} characters long`);\r\n      }\r\n    }\r\n\r\n    // Field-specific validation\r\n    switch (field) {\r\n      case 'email':\r\n        if (!this.patterns.email.test(stringValue)) {\r\n          errors.push('Invalid email format');\r\n        }\r\n        break;\r\n\r\n      case 'phone':\r\n        if (!this.patterns.phone.test(stringValue.replace(/[\\s\\-\\(\\)]/g, ''))) {\r\n          errors.push('Invalid phone number format');\r\n        }\r\n        break;\r\n\r\n      case 'website':\r\n        if (!this.patterns.url.test(stringValue)) {\r\n          errors.push('Invalid website URL format');\r\n        }\r\n        break;\r\n\r\n      case 'name':\r\n        if (!this.patterns.name.test(stringValue)) {\r\n          errors.push('Name contains invalid characters');\r\n        }\r\n        break;\r\n\r\n      case 'company':\r\n        if (stringValue.length > 0 && !this.patterns.alphanumeric.test(stringValue)) {\r\n          errors.push('Company name contains invalid characters');\r\n        }\r\n        break;\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Sanitize form data to prevent XSS and other attacks\r\n   * @param {Object} formData - Raw form data\r\n   * @returns {Object} Sanitized form data\r\n   */\r\n  sanitizeFormData(formData) {\r\n    const sanitized = {};\r\n\r\n    for (const [key, value] of Object.entries(formData)) {\r\n      // Skip system fields\r\n      if (['timestamp', 'ip', 'userAgent', 'origin'].includes(key)) {\r\n        sanitized[key] = value;\r\n        continue;\r\n      }\r\n\r\n      // Sanitize string values\r\n      if (typeof value === 'string') {\r\n        sanitized[key] = this.sanitizeString(value);\r\n      } else if (typeof value === 'number') {\r\n        sanitized[key] = this.sanitizeNumber(value);\r\n      } else if (typeof value === 'boolean') {\r\n        sanitized[key] = value;\r\n      } else {\r\n        // Convert other types to string and sanitize\r\n        sanitized[key] = this.sanitizeString(String(value));\r\n      }\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Sanitize string value\r\n   * @param {string} value - String to sanitize\r\n   * @returns {string} Sanitized string\r\n   */\r\n  sanitizeString(value) {\r\n    if (typeof value !== 'string') {\r\n      return String(value);\r\n    }\r\n\r\n    return value\r\n      .trim()\r\n      // Remove null bytes\r\n      .replace(/\\0/g, '')\r\n      // Remove control characters except newlines and tabs\r\n      .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, '')\r\n      // Normalize whitespace\r\n      .replace(/\\s+/g, ' ')\r\n      // Limit length to prevent abuse\r\n      .substring(0, 10000);\r\n  }\r\n\r\n  /**\r\n   * Sanitize number value\r\n   * @param {number} value - Number to sanitize\r\n   * @returns {number} Sanitized number\r\n   */\r\n  sanitizeNumber(value) {\r\n    if (typeof value !== 'number' || !isFinite(value)) {\r\n      return 0;\r\n    }\r\n\r\n    // Limit to reasonable range\r\n    return Math.max(-999999999, Math.min(999999999, value));\r\n  }\r\n\r\n  /**\r\n   * Validate email format\r\n   * @param {string} email - Email to validate\r\n   * @returns {boolean} Is valid email\r\n   */\r\n  isValidEmail(email) {\r\n    return this.patterns.email.test(email);\r\n  }\r\n\r\n  /**\r\n   * Validate phone number format\r\n   * @param {string} phone - Phone to validate\r\n   * @returns {boolean} Is valid phone\r\n   */\r\n  isValidPhone(phone) {\r\n    return this.patterns.phone.test(phone.replace(/[\\s\\-\\(\\)]/g, ''));\r\n  }\r\n\r\n  /**\r\n   * Validate URL format\r\n   * @param {string} url - URL to validate\r\n   * @returns {boolean} Is valid URL\r\n   */\r\n  isValidUrl(url) {\r\n    return this.patterns.url.test(url);\r\n  }\r\n\r\n  /**\r\n   * Check if string contains only safe characters\r\n   * @param {string} str - String to check\r\n   * @returns {boolean} Is safe string\r\n   */\r\n  isSafeString(str) {\r\n    return this.patterns.alphanumeric.test(str);\r\n  }\r\n\r\n  /**\r\n   * Get field validation rules\r\n   * @param {string} field - Field name\r\n   * @returns {Object} Validation rules\r\n   */\r\n  getFieldRules(field) {\r\n    return {\r\n      pattern: this.patterns[field] || null,\r\n      limits: this.limits[field] || null,\r\n      required: false // This should be determined by the form configuration\r\n    };\r\n  }\r\n}\r\n", "/**\r\n * Security Helper\r\n * Handles security-related functionality including CORS, rate limiting, and request validation\r\n * \r\n * Features:\r\n * - CORS header management\r\n * - Rate limiting with IP-based tracking\r\n * - Request origin validation\r\n * - Security headers\r\n * - Input sanitization helpers\r\n */\r\n\r\nexport class SecurityHelper {\r\n  constructor() {\r\n    // Rate limiting storage (in production, use Cloudflare KV or Durable Objects)\r\n    this.rateLimitStore = new Map();\r\n  }\r\n\r\n  /**\r\n   * Get CORS headers for response\r\n   * @param {Request} request - Incoming request\r\n   * @param {string} allowedOrigins - Comma-separated list of allowed origins\r\n   * @returns {Object} CORS headers\r\n   */\r\n  getCorsHeaders(request, allowedOrigins = '*') {\r\n    const origin = request.headers.get('Origin');\r\n    const allowedOriginsList = allowedOrigins ? allowedOrigins.split(',').map(o => o.trim()) : ['*'];\r\n    \r\n    // Determine if origin is allowed\r\n    const isAllowedOrigin = allowedOriginsList.includes('*') || \r\n                           allowedOriginsList.includes(origin) ||\r\n                           this.isSubdomainAllowed(origin, allowedOriginsList);\r\n\r\n    return {\r\n      'Access-Control-Allow-Origin': isAllowedOrigin ? (origin || '*') : 'null',\r\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\r\n      'Access-Control-Max-Age': '86400',\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-Frame-Options': 'DENY',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if origin is a subdomain of allowed domains\r\n   * @param {string} origin - Request origin\r\n   * @param {Array} allowedOrigins - List of allowed origins\r\n   * @returns {boolean} Is subdomain allowed\r\n   */\r\n  isSubdomainAllowed(origin, allowedOrigins) {\r\n    if (!origin) return false;\r\n    \r\n    return allowedOrigins.some(allowed => {\r\n      if (allowed === '*') return true;\r\n      if (origin === allowed) return true;\r\n      \r\n      // Check if origin is subdomain of allowed domain\r\n      if (allowed.startsWith('.')) {\r\n        return origin.endsWith(allowed);\r\n      }\r\n      \r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check rate limit for request\r\n   * @param {Request} request - Incoming request\r\n   * @param {Object} env - Environment variables\r\n   * @returns {Object} Rate limit result\r\n   */\r\n  async checkRateLimit(request, env) {\r\n    const ip = request.headers.get('CF-Connecting-IP') || 'unknown';\r\n    const rateLimitPerMinute = parseInt(env.RATE_LIMIT_REQUESTS_PER_MINUTE) || 60;\r\n    const now = Date.now();\r\n    const windowMs = 60 * 1000; // 1 minute window\r\n\r\n    // Get or create rate limit entry for this IP\r\n    if (!this.rateLimitStore.has(ip)) {\r\n      this.rateLimitStore.set(ip, {\r\n        requests: [],\r\n        lastCleanup: now\r\n      });\r\n    }\r\n\r\n    const rateLimitData = this.rateLimitStore.get(ip);\r\n    \r\n    // Clean up old requests outside the window\r\n    rateLimitData.requests = rateLimitData.requests.filter(\r\n      timestamp => now - timestamp < windowMs\r\n    );\r\n\r\n    // Check if rate limit exceeded\r\n    if (rateLimitData.requests.length >= rateLimitPerMinute) {\r\n      return {\r\n        allowed: false,\r\n        remaining: 0,\r\n        resetTime: rateLimitData.requests[0] + windowMs\r\n      };\r\n    }\r\n\r\n    // Add current request\r\n    rateLimitData.requests.push(now);\r\n    this.rateLimitStore.set(ip, rateLimitData);\r\n\r\n    return {\r\n      allowed: true,\r\n      remaining: rateLimitPerMinute - rateLimitData.requests.length,\r\n      resetTime: now + windowMs\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate request origin\r\n   * @param {Request} request - Incoming request\r\n   * @param {string} allowedOrigins - Comma-separated list of allowed origins\r\n   * @returns {boolean} Is origin valid\r\n   */\r\n  validateOrigin(request, allowedOrigins) {\r\n    const origin = request.headers.get('Origin');\r\n    if (!origin) return false;\r\n\r\n    const allowedOriginsList = allowedOrigins ? allowedOrigins.split(',').map(o => o.trim()) : [];\r\n    \r\n    if (allowedOriginsList.includes('*')) return true;\r\n    if (allowedOriginsList.includes(origin)) return true;\r\n    \r\n    return this.isSubdomainAllowed(origin, allowedOriginsList);\r\n  }\r\n\r\n  /**\r\n   * Validate API key if provided\r\n   * @param {Request} request - Incoming request\r\n   * @param {string} expectedApiKey - Expected API key\r\n   * @returns {boolean} Is API key valid\r\n   */\r\n  validateApiKey(request, expectedApiKey) {\r\n    if (!expectedApiKey) return true; // No API key required\r\n\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader) return false;\r\n\r\n    const apiKey = authHeader.replace('Bearer ', '');\r\n    return apiKey === expectedApiKey;\r\n  }\r\n\r\n  /**\r\n   * Get client IP address\r\n   * @param {Request} request - Incoming request\r\n   * @returns {string} Client IP address\r\n   */\r\n  getClientIP(request) {\r\n    return request.headers.get('CF-Connecting-IP') || \r\n           request.headers.get('X-Forwarded-For') || \r\n           request.headers.get('X-Real-IP') || \r\n           'unknown';\r\n  }\r\n\r\n  /**\r\n   * Check if request is from a bot\r\n   * @param {Request} request - Incoming request\r\n   * @returns {boolean} Is likely bot\r\n   */\r\n  isBotRequest(request) {\r\n    const userAgent = request.headers.get('User-Agent') || '';\r\n    const botPatterns = [\r\n      /bot/i, /crawler/i, /spider/i, /scraper/i,\r\n      /curl/i, /wget/i, /python/i, /java/i,\r\n      /postman/i, /insomnia/i\r\n    ];\r\n\r\n    return botPatterns.some(pattern => pattern.test(userAgent));\r\n  }\r\n\r\n  /**\r\n   * Sanitize input to prevent XSS\r\n   * @param {string} input - Input to sanitize\r\n   * @returns {string} Sanitized input\r\n   */\r\n  sanitizeInput(input) {\r\n    if (typeof input !== 'string') {\r\n      return String(input);\r\n    }\r\n\r\n    return input\r\n      .replace(/[<>]/g, '') // Remove angle brackets\r\n      .replace(/javascript:/gi, '') // Remove javascript: protocol\r\n      .replace(/on\\w+=/gi, '') // Remove event handlers\r\n      .trim();\r\n  }\r\n\r\n  /**\r\n   * Generate secure random string\r\n   * @param {number} length - Length of string\r\n   * @returns {string} Random string\r\n   */\r\n  generateSecureToken(length = 32) {\r\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let result = '';\r\n    \r\n    for (let i = 0; i < length; i++) {\r\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Validate request size\r\n   * @param {Request} request - Incoming request\r\n   * @param {number} maxSize - Maximum size in bytes\r\n   * @returns {boolean} Is size valid\r\n   */\r\n  async validateRequestSize(request, maxSize = 1024 * 1024) { // 1MB default\r\n    const contentLength = request.headers.get('Content-Length');\r\n    \r\n    if (contentLength && parseInt(contentLength) > maxSize) {\r\n      return false;\r\n    }\r\n\r\n    // For Cloudflare Workers, we can't easily check body size before reading\r\n    // This is a basic check - in production, consider using Durable Objects\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get security headers for response\r\n   * @returns {Object} Security headers\r\n   */\r\n  getSecurityHeaders() {\r\n    return {\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-Frame-Options': 'DENY',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n      'Permissions-Policy': 'geolocation=(), microphone=(), camera=()'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clean up old rate limit entries\r\n   * This should be called periodically to prevent memory leaks\r\n   */\r\n  cleanupRateLimitStore() {\r\n    const now = Date.now();\r\n    const maxAge = 60 * 60 * 1000; // 1 hour\r\n\r\n    for (const [ip, data] of this.rateLimitStore.entries()) {\r\n      if (now - data.lastCleanup > maxAge) {\r\n        this.rateLimitStore.delete(ip);\r\n      }\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * Logger Utility\r\n * Handles logging for the form handler system\r\n * \r\n * Features:\r\n * - Structured logging\r\n * - Different log levels\r\n * - Error tracking\r\n * - Performance monitoring\r\n * - Cloudflare Workers compatible\r\n */\r\n\r\nexport class Logger {\r\n  constructor() {\r\n    this.logLevel = 'INFO'; // DEBUG, INFO, WARN, ERROR\r\n    this.startTime = Date.now();\r\n  }\r\n\r\n  /**\r\n   * Log info message\r\n   * @param {string} message - Log message\r\n   * @param {Object} data - Additional data to log\r\n   */\r\n  log(message, data = {}) {\r\n    this.writeLog('INFO', message, data);\r\n  }\r\n\r\n  /**\r\n   * Log debug message\r\n   * @param {string} message - Log message\r\n   * @param {Object} data - Additional data to log\r\n   */\r\n  debug(message, data = {}) {\r\n    this.writeLog('DEBUG', message, data);\r\n  }\r\n\r\n  /**\r\n   * Log warning message\r\n   * @param {string} message - Log message\r\n   * @param {Object} data - Additional data to log\r\n   */\r\n  warn(message, data = {}) {\r\n    this.writeLog('WARN', message, data);\r\n  }\r\n\r\n  /**\r\n   * Log error message\r\n   * @param {string} message - Log message\r\n   * @param {Error|Object} error - Error object or additional data\r\n   */\r\n  error(message, error = {}) {\r\n    const errorData = error instanceof Error ? {\r\n      message: error.message,\r\n      stack: error.stack,\r\n      name: error.name\r\n    } : error;\r\n\r\n    this.writeLog('ERROR', message, errorData);\r\n  }\r\n\r\n  /**\r\n   * Write log entry\r\n   * @param {string} level - Log level\r\n   * @param {string} message - Log message\r\n   * @param {Object} data - Additional data\r\n   */\r\n  writeLog(level, message, data) {\r\n    const timestamp = new Date().toISOString();\r\n    const logEntry = {\r\n      timestamp,\r\n      level,\r\n      message,\r\n      data: this.sanitizeLogData(data),\r\n      requestId: this.generateRequestId(),\r\n      duration: Date.now() - this.startTime\r\n    };\r\n\r\n    // In Cloudflare Workers, console.log is the primary logging method\r\n    // In production, you might want to send logs to an external service\r\n    console.log(JSON.stringify(logEntry));\r\n  }\r\n\r\n  /**\r\n   * Sanitize log data to prevent sensitive information leakage\r\n   * @param {Object} data - Data to sanitize\r\n   * @returns {Object} Sanitized data\r\n   */\r\n  sanitizeLogData(data) {\r\n    if (!data || typeof data !== 'object') {\r\n      return data;\r\n    }\r\n\r\n    const sanitized = { ...data };\r\n    const sensitiveFields = [\r\n      'password', 'token', 'key', 'secret', 'apiKey',\r\n      'authorization', 'cookie', 'session'\r\n    ];\r\n\r\n    // Remove or mask sensitive fields\r\n    for (const field of sensitiveFields) {\r\n      if (sanitized[field]) {\r\n        sanitized[field] = '[REDACTED]';\r\n      }\r\n    }\r\n\r\n    // Recursively sanitize nested objects\r\n    for (const [key, value] of Object.entries(sanitized)) {\r\n      if (typeof value === 'object' && value !== null) {\r\n        sanitized[key] = this.sanitizeLogData(value);\r\n      }\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Generate unique request ID\r\n   * @returns {string} Request ID\r\n   */\r\n  generateRequestId() {\r\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Log form submission\r\n   * @param {Object} formData - Form data\r\n   * @param {string} status - Submission status\r\n   * @param {Object} result - Processing result\r\n   */\r\n  logFormSubmission(formData, status, result) {\r\n    this.log('Form submission processed', {\r\n      status,\r\n      fields: Object.keys(formData),\r\n      result: {\r\n        airtable: result.airtable?.success || false,\r\n        email: result.email?.success || false,\r\n        submissionId: result.submissionId\r\n      },\r\n      origin: formData.origin,\r\n      ip: formData.ip\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log API request\r\n   * @param {Request} request - Incoming request\r\n   * @param {Object} response - Response object\r\n   * @param {number} duration - Request duration in ms\r\n   */\r\n  logApiRequest(request, response, duration) {\r\n    this.log('API request processed', {\r\n      method: request.method,\r\n      url: request.url,\r\n      status: response.status,\r\n      duration,\r\n      userAgent: request.headers.get('User-Agent'),\r\n      origin: request.headers.get('Origin'),\r\n      ip: request.headers.get('CF-Connecting-IP')\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log service error\r\n   * @param {string} service - Service name (airtable, email, etc.)\r\n   * @param {Error} error - Error object\r\n   * @param {Object} context - Additional context\r\n   */\r\n  logServiceError(service, error, context = {}) {\r\n    this.error(`Service error: ${service}`, {\r\n      service,\r\n      error: error.message,\r\n      stack: error.stack,\r\n      context\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log performance metrics\r\n   * @param {string} operation - Operation name\r\n   * @param {number} duration - Duration in ms\r\n   * @param {Object} metadata - Additional metadata\r\n   */\r\n  logPerformance(operation, duration, metadata = {}) {\r\n    this.log('Performance metric', {\r\n      operation,\r\n      duration,\r\n      metadata\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log security event\r\n   * @param {string} event - Security event type\r\n   * @param {Object} details - Event details\r\n   */\r\n  logSecurityEvent(event, details) {\r\n    this.warn('Security event', {\r\n      event,\r\n      details: this.sanitizeLogData(details),\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set log level\r\n   * @param {string} level - Log level (DEBUG, INFO, WARN, ERROR)\r\n   */\r\n  setLogLevel(level) {\r\n    this.logLevel = level.toUpperCase();\r\n  }\r\n\r\n  /**\r\n   * Check if log level should be written\r\n   * @param {string} level - Log level to check\r\n   * @returns {boolean} Should write log\r\n   */\r\n  shouldLog(level) {\r\n    const levels = ['DEBUG', 'INFO', 'WARN', 'ERROR'];\r\n    const currentLevelIndex = levels.indexOf(this.logLevel);\r\n    const messageLevelIndex = levels.indexOf(level);\r\n    \r\n    return messageLevelIndex >= currentLevelIndex;\r\n  }\r\n\r\n  /**\r\n   * Create child logger with additional context\r\n   * @param {Object} context - Additional context to include in all logs\r\n   * @returns {Logger} Child logger instance\r\n   */\r\n  child(context) {\r\n    const childLogger = new Logger();\r\n    childLogger.logLevel = this.logLevel;\r\n    childLogger.startTime = this.startTime;\r\n    \r\n    // Override writeLog to include context\r\n    const originalWriteLog = childLogger.writeLog.bind(childLogger);\r\n    childLogger.writeLog = (level, message, data) => {\r\n      originalWriteLog(level, message, { ...context, ...data });\r\n    };\r\n    \r\n    return childLogger;\r\n  }\r\n}\r\n", "/**\r\n * Cloudflare Workers Form Handler\r\n * Production-ready form submission handler with Airtable and Resend integration\r\n * Updated to handle Airtable Timestamp field correctly\r\n */\r\n\r\nimport { AirtableService } from './services/airtable.js';\r\nimport { EmailService } from './services/email.js';\r\nimport { FormValidator } from './utils/validator.js';\r\nimport { SecurityHelper } from './utils/security.js';\r\nimport { Logger } from './utils/logger.js';\r\n\r\n// Initialize services\r\nconst airtableService = new AirtableService();\r\nconst emailService = new EmailService();\r\nconst validator = new FormValidator();\r\nconst security = new SecurityHelper();\r\nconst logger = new Logger();\r\n\r\n/**\r\n * Main request handler\r\n */\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    try {\r\n      // Get CORS headers (allows your frontend to call this Worker)\r\n      const corsHeaders = security.getCorsHeaders(request, env.ALLOWED_ORIGINS);\r\n\r\n      // Handle preflight OPTIONS requests for CORS\r\n      if (request.method === 'OPTIONS') {\r\n        return new Response(null, { status: 200, headers: corsHeaders });\r\n      }\r\n\r\n      // Only allow POST requests\r\n      if (request.method !== 'POST') {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Method not allowed. Only POST requests are accepted.'\r\n        }), { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\r\n      }\r\n\r\n      // Rate limiting\r\n      const rateLimitResult = await security.checkRateLimit(request, env);\r\n      if (!rateLimitResult.allowed) {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Rate limit exceeded. Please try again later.'\r\n        }), { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\r\n      }\r\n\r\n      // Parse incoming JSON form data\r\n      const formData = await request.json();\r\n\r\n      // Validate required fields\r\n      const validationResult = validator.validateFormData(formData, env.REQUIRED_FIELDS);\r\n      if (!validationResult.isValid) {\r\n        return new Response(JSON.stringify({\r\n          success: false,\r\n          error: 'Validation failed',\r\n          details: validationResult.errors\r\n        }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\r\n      }\r\n\r\n      // Sanitize form data to prevent bad input\r\n      const sanitizedData = validator.sanitizeFormData(formData);\r\n\r\n      // Prepare submission data for Airtable\r\n      // FIX: Airtable Timestamp must be in a format it accepts\r\n      // Here we send only ISO string with full date-time (works if field is \"Date & Time\")\r\n      const now = new Date();\r\n      const submissionData = {\r\n        Name: sanitizedData.name || '',\r\n        Email: sanitizedData.email || '',\r\n        Message: sanitizedData.message || '',\r\n        Timestamp: now.toISOString().split('T')[0],\r\n        'IP Address': request.headers.get('CF-Connecting-IP') || 'unknown',\r\n        Origin: request.headers.get('Origin') || request.headers.get('Referer') || 'unknown'\r\n      };\r\n\r\n      // Process submission: save to Airtable + send email\r\n      const result = await processFormSubmission(submissionData, env);\r\n\r\n      // Log submission details for debugging\r\n      logger.log('Form submission processed', {\r\n        success: result.success,\r\n        submissionId: result.submissionId,\r\n        origin: submissionData.Origin\r\n      });\r\n\r\n      // Return response to frontend\r\n      return new Response(JSON.stringify(result), {\r\n        status: result.success ? 200 : 500,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      });\r\n\r\n    } catch (error) {\r\n      // Unexpected errors\r\n      logger.error('Unexpected error in form handler', error);\r\n      return new Response(JSON.stringify({\r\n        success: false,\r\n        error: 'Internal server error. Please try again later.'\r\n      }), {\r\n        status: 500,\r\n        headers: security.getCorsHeaders(request, env.ALLOWED_ORIGINS)\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Process form submission (Airtable + Resend Email)\r\n */\r\nasync function processFormSubmission(formData, env) {\r\n  const submissionId = generateSubmissionId();\r\n  const results = {\r\n    success: false,\r\n    submissionId,\r\n    airtable: { success: false, error: null },\r\n    email: { success: false, error: null }\r\n  };\r\n\r\n  try {\r\n    // Save to Airtable\r\n    if (env.AIRTABLE_API_KEY && env.AIRTABLE_BASE_ID) {\r\n      try {\r\n        const airtableResult = await airtableService.saveSubmission(formData, env);\r\n        results.airtable = airtableResult;\r\n        console.log('Airtable response:', airtableResult);\r\n      } catch (error) {\r\n        results.airtable.error = error.message;\r\n        console.error('Airtable error:', error);\r\n      }\r\n    }\r\n\r\n    // Send email via Resend\r\n    if (env.RESEND_API_KEY) {\r\n      try {\r\n        const emailResult = await emailService.sendNotification(formData, env);\r\n        results.email = emailResult;\r\n        console.log('Resend response:', emailResult);\r\n      } catch (error) {\r\n        results.email.error = error.message;\r\n        console.error('Resend error:', error);\r\n      }\r\n    }\r\n\r\n    // Mark overall success if at least one service succeeded\r\n    results.success = results.airtable.success || results.email.success;\r\n    return results;\r\n\r\n  } catch (error) {\r\n    console.error('Form processing failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Generate unique submission ID\r\n */\r\nfunction generateSubmissionId() {\r\n  return `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/reak/myfiles/FormHandler2/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/reak/myfiles/FormHandler2/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/reak/myfiles/FormHandler2/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/reak/myfiles/FormHandler2/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/reak/myfiles/FormHandler2/.wrangler/tmp/bundle-uP6E1U/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/reak/myfiles/FormHandler2/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/reak/myfiles/FormHandler2/.wrangler/tmp/bundle-uP6E1U/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/reak/myfiles/FormHandler2/.wrangler/tmp/bundle-uP6E1U/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
